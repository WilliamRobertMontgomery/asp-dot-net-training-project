#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.261
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.LabWork.Policlinic.Library.Business
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PoliclinicDB")]
	public partial class PoliclinicDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertDoctors(Doctor instance);
    partial void UpdateDoctors(Doctor instance);
    partial void DeleteDoctors(Doctor instance);
    partial void InsertSpecializations(Specialization instance);
    partial void UpdateSpecializations(Specialization instance);
    partial void DeleteSpecializations(Specialization instance);
    partial void InsertPacients(Pacient instance);
    partial void UpdatePacients(Pacient instance);
    partial void DeletePacients(Pacient instance);
    partial void InsertRecords(Record instance);
    partial void UpdateRecords(Record instance);
    partial void DeleteRecords(Record instance);
    #endregion
		
		public PoliclinicDataContext() : 
				base(global::My.LabWork.Policlinic.Library.Properties.Settings.Default.PoliclinicDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public PoliclinicDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PoliclinicDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PoliclinicDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PoliclinicDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Specialization> Specializations
		{
			get
			{
				return this.GetTable<Specialization>();
			}
		}
		
		public System.Data.Linq.Table<Pacient> Pacients
		{
			get
			{
				return this.GetTable<Pacient>();
			}
		}
		
		public System.Data.Linq.Table<Record> Records
		{
			get
			{
				return this.GetTable<Record>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctors")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _Id_Specialization;
		
		private EntitySet<Record> _Records;
		
		private EntityRef<Specialization> _Specializations;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnId_SpecializationChanging(int value);
    partial void OnId_SpecializationChanged();
    #endregion
		
		public Doctor()
		{
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			this._Specializations = default(EntityRef<Specialization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Specialization", DbType="Int NOT NULL")]
		public int Id_Specialization
		{
			get
			{
				return this._Id_Specialization;
			}
			set
			{
				if ((this._Id_Specialization != value))
				{
					if (this._Specializations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_SpecializationChanging(value);
					this.SendPropertyChanging();
					this._Id_Specialization = value;
					this.SendPropertyChanged("Id_Specialization");
					this.OnId_SpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctors_Records", Storage="_Records", ThisKey="Id", OtherKey="Id_Doctor")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specializations_Doctors", Storage="_Specializations", ThisKey="Id_Specialization", OtherKey="Id", IsForeignKey=true)]
		public Specialization Specialization
		{
			get
			{
				return this._Specializations.Entity;
			}
			set
			{
				Specialization previousValue = this._Specializations.Entity;
				if (((previousValue != value) 
							|| (this._Specializations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specializations.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._Specializations.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._Id_Specialization = value.Id;
					}
					else
					{
						this._Id_Specialization = default(int);
					}
					this.SendPropertyChanged("Specializations");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specializations")]
	public partial class Specialization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NameSpecialization;
		
		private EntitySet<Doctor> _Doctors;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameSpecializationChanging(string value);
    partial void OnNameSpecializationChanged();
    #endregion
		
		public Specialization()
		{
			this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameSpecialization", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameSpecialization
		{
			get
			{
				return this._NameSpecialization;
			}
			set
			{
				if ((this._NameSpecialization != value))
				{
					this.OnNameSpecializationChanging(value);
					this.SendPropertyChanging();
					this._NameSpecialization = value;
					this.SendPropertyChanged("NameSpecialization");
					this.OnNameSpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specializations_Doctors", Storage="_Doctors", ThisKey="Id", OtherKey="Id_Specialization")]
		public EntitySet<Doctor> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.Specialization = this;
		}
		
		private void detach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.Specialization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pacients")]
	public partial class Pacient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<Record> _Records;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Pacient()
		{
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacients_Records", Storage="_Records", ThisKey="Id", OtherKey="Id_Pacient")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Pacient = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Pacient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Records")]
	public partial class Record : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Id_Doctor;
		
		private int _Id_Pacient;
		
		private System.DateTime _Time;
		
		private EntityRef<Doctor> _Doctors;
		
		private EntityRef<Pacient> _Pacients;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnId_DoctorChanging(int value);
    partial void OnId_DoctorChanged();
    partial void OnId_PacientChanging(int value);
    partial void OnId_PacientChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public Record()
		{
			this._Doctors = default(EntityRef<Doctor>);
			this._Pacients = default(EntityRef<Pacient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Doctor", DbType="Int NOT NULL")]
		public int Id_Doctor
		{
			get
			{
				return this._Id_Doctor;
			}
			set
			{
				if ((this._Id_Doctor != value))
				{
					if (this._Doctors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_DoctorChanging(value);
					this.SendPropertyChanging();
					this._Id_Doctor = value;
					this.SendPropertyChanged("Id_Doctor");
					this.OnId_DoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Pacient", DbType="Int NOT NULL")]
		public int Id_Pacient
		{
			get
			{
				return this._Id_Pacient;
			}
			set
			{
				if ((this._Id_Pacient != value))
				{
					if (this._Pacients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_PacientChanging(value);
					this.SendPropertyChanging();
					this._Id_Pacient = value;
					this.SendPropertyChanged("Id_Pacient");
					this.OnId_PacientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctors_Records", Storage="_Doctors", ThisKey="Id_Doctor", OtherKey="Id", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctors.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctors.Entity;
				if (((previousValue != value) 
							|| (this._Doctors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctors.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Doctors.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._Id_Doctor = value.Id;
					}
					else
					{
						this._Id_Doctor = default(int);
					}
					this.SendPropertyChanged("Doctors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacients_Records", Storage="_Pacients", ThisKey="Id_Pacient", OtherKey="Id", IsForeignKey=true)]
		public Pacient Pacient
		{
			get
			{
				return this._Pacients.Entity;
			}
			set
			{
				Pacient previousValue = this._Pacients.Entity;
				if (((previousValue != value) 
							|| (this._Pacients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pacients.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Pacients.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._Id_Pacient = value.Id;
					}
					else
					{
						this._Id_Pacient = default(int);
					}
					this.SendPropertyChanged("Pacients");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
