#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab4.Library.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;


	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "Library")]
	public partial class LibraryDataContext : CustomLibraryDataContext
	{

		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertBook(Book instance);
		partial void UpdateBook(Book instance);
		partial void DeleteBook(Book instance);
		partial void InsertReader(Reader instance);
		partial void UpdateReader(Reader instance);
		partial void DeleteReader(Reader instance);
		partial void InsertLibrarian(Librarian instance);
		partial void UpdateLibrarian(Librarian instance);
		partial void DeleteLibrarian(Librarian instance);
		partial void InsertLibraryDepartment(LibraryDepartment instance);
		partial void UpdateLibraryDepartment(LibraryDepartment instance);
		partial void DeleteLibraryDepartment(LibraryDepartment instance);
		partial void InsertOrder(Order instance);
		partial void UpdateOrder(Order instance);
		partial void DeleteOrder(Order instance);
		#endregion

		public LibraryDataContext() :
			base(mappingSource)
		//base(global::Lab2.Library.Properties.Settings.Default.LibraryConnectionString, mappingSource)
		{
			OnCreated();
		}

		public LibraryDataContext(string connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public LibraryDataContext(System.Data.IDbConnection connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public LibraryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public LibraryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}

		public System.Data.Linq.Table<Reader> Readers
		{
			get
			{
				return this.GetTable<Reader>();
			}
		}

		public System.Data.Linq.Table<Librarian> Librarians
		{
			get
			{
				return this.GetTable<Librarian>();
			}
		}

		public System.Data.Linq.Table<LibraryDepartment> LibraryDepartments
		{
			get
			{
				return this.GetTable<LibraryDepartment>();
			}
		}

		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Books")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _Id;

		private string _Author;

		private string _Title;

		private int _Year;

		private System.Guid _DepartmentId;

		private EntitySet<Order> _Orders;

		private EntityRef<LibraryDepartment> _Department;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnIdChanging(System.Guid value);
		partial void OnIdChanged();
		partial void OnAuthorChanging(string value);
		partial void OnAuthorChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnYearChanging(int value);
		partial void OnYearChanged();
		partial void OnDepartmentIdChanging(System.Guid value);
		partial void OnDepartmentIdChanged();
		#endregion

		public Book()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Department = default(EntityRef<LibraryDepartment>);
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Author", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Title", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Year", DbType = "Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DepartmentId", DbType = "UniqueIdentifier NOT NULL")]
		public System.Guid DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Book_Order", Storage = "_Orders", ThisKey = "Id", OtherKey = "BookId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LibraryDepartment_Book", Storage = "_Department", ThisKey = "DepartmentId", OtherKey = "Id", IsForeignKey = true)]
		public LibraryDepartment Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				LibraryDepartment previousValue = this._Department.Entity;
				if (((previousValue != value)
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(System.Guid);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}

		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Readers")]
	public partial class Reader : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _Id;

		private string _FullName;

		private string _Address;

		private EntitySet<Order> _Orders;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnIdChanging(System.Guid value);
		partial void OnIdChanged();
		partial void OnFullNameChanging(string value);
		partial void OnFullNameChanged();
		partial void OnAddressChanging(string value);
		partial void OnAddressChanged();
		#endregion

		public Reader()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FullName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Reader_Order", Storage = "_Orders", ThisKey = "Id", OtherKey = "ReaderId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Reader = this;
		}

		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Reader = null;
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Librarians")]
	public partial class Librarian : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _Id;

		private string _FullName;

		private System.Guid _DepartmentId;

		private EntitySet<Order> _Orders;

		private EntitySet<Order> _Orders1;

		private EntityRef<LibraryDepartment> _Department;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnIdChanging(System.Guid value);
		partial void OnIdChanged();
		partial void OnFullNameChanging(string value);
		partial void OnFullNameChanged();
		partial void OnDepartmentIdChanging(System.Guid value);
		partial void OnDepartmentIdChanged();
		#endregion

		public Librarian()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Orders1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders1), new Action<Order>(this.detach_Orders1));
			this._Department = default(EntityRef<LibraryDepartment>);
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FullName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DepartmentId", DbType = "UniqueIdentifier NOT NULL")]
		public System.Guid DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Librarian_Order", Storage = "_Orders", ThisKey = "Id", OtherKey = "LibrarianOpenOrderId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Librarian_Order1", Storage = "_Orders1", ThisKey = "Id", OtherKey = "LibrarianClosedOrderId")]
		public EntitySet<Order> Orders1
		{
			get
			{
				return this._Orders1;
			}
			set
			{
				this._Orders1.Assign(value);
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LibraryDepartment_Librarian", Storage = "_Department", ThisKey = "DepartmentId", OtherKey = "Id", IsForeignKey = true)]
		public LibraryDepartment Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				LibraryDepartment previousValue = this._Department.Entity;
				if (((previousValue != value)
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Librarians.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Librarians.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(System.Guid);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.LibrarianOpenOrder = this;
		}

		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.LibrarianOpenOrder = null;
		}

		private void attach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.LibrarianClosedOrder = this;
		}

		private void detach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.LibrarianClosedOrder = null;
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.LibraryDepartments")]
	public partial class LibraryDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _Id;

		private string _Name;

		private bool _IsAbonement;

		private EntitySet<Book> _Books;

		private EntitySet<Librarian> _Librarians;

		private EntitySet<Order> _Orders;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnIdChanging(System.Guid value);
		partial void OnIdChanged();
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		partial void OnIsAbonementChanging(bool value);
		partial void OnIsAbonementChanged();
		#endregion

		public LibraryDepartment()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._Librarians = new EntitySet<Librarian>(new Action<Librarian>(this.attach_Librarians), new Action<Librarian>(this.detach_Librarians));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsAbonement", DbType = "Bit NOT NULL")]
		public bool IsAbonement
		{
			get
			{
				return this._IsAbonement;
			}
			set
			{
				if ((this._IsAbonement != value))
				{
					this.OnIsAbonementChanging(value);
					this.SendPropertyChanging();
					this._IsAbonement = value;
					this.SendPropertyChanged("IsAbonement");
					this.OnIsAbonementChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LibraryDepartment_Book", Storage = "_Books", ThisKey = "Id", OtherKey = "DepartmentId")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LibraryDepartment_Librarian", Storage = "_Librarians", ThisKey = "Id", OtherKey = "DepartmentId")]
		public EntitySet<Librarian> Librarians
		{
			get
			{
				return this._Librarians;
			}
			set
			{
				this._Librarians.Assign(value);
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LibraryDepartment_Order", Storage = "_Orders", ThisKey = "Id", OtherKey = "DepartmentId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}

		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}

		private void attach_Librarians(Librarian entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}

		private void detach_Librarians(Librarian entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}

		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}

		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _Id;

		private System.Guid _ReaderId;

		private System.Guid _BookId;

		private System.Guid _DepartmentId;

		private System.DateTime _TimeGetBook;

		private System.Guid _LibrarianOpenOrderId;

		private System.DateTime _TimeReturnBook;

		private System.Nullable<System.Guid> _LibrarianClosedOrderId;

		private bool _Closed;

		private EntityRef<Book> _Book;

		private EntityRef<Librarian> _LibrarianOpenOrder;

		private EntityRef<Librarian> _LibrarianClosedOrder;

		private EntityRef<LibraryDepartment> _Department;

		private EntityRef<Reader> _Reader;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnIdChanging(System.Guid value);
		partial void OnIdChanged();
		partial void OnReaderIdChanging(System.Guid value);
		partial void OnReaderIdChanged();
		partial void OnBookIdChanging(System.Guid value);
		partial void OnBookIdChanged();
		partial void OnDepartmentIdChanging(System.Guid value);
		partial void OnDepartmentIdChanged();
		partial void OnTimeGetBookChanging(System.DateTime value);
		partial void OnTimeGetBookChanged();
		partial void OnLibrarianOpenOrderIdChanging(System.Guid value);
		partial void OnLibrarianOpenOrderIdChanged();
		partial void OnTimeReturnBookChanging(System.DateTime value);
		partial void OnTimeReturnBookChanged();
		partial void OnLibrarianClosedOrderIdChanging(System.Nullable<System.Guid> value);
		partial void OnLibrarianClosedOrderIdChanged();
		partial void OnClosedChanging(bool value);
		partial void OnClosedChanged();
		#endregion

		public Order()
		{
			this._TimeGetBook = DateTime.Now;
			this._TimeReturnBook = DateTime.Now;
			this._Book = default(EntityRef<Book>);
			this._LibrarianOpenOrder = default(EntityRef<Librarian>);
			this._LibrarianClosedOrder = default(EntityRef<Librarian>);
			this._Department = default(EntityRef<LibraryDepartment>);
			this._Reader = default(EntityRef<Reader>);
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ReaderId", DbType = "UniqueIdentifier NOT NULL")]
		public System.Guid ReaderId
		{
			get
			{
				return this._ReaderId;
			}
			set
			{
				if ((this._ReaderId != value))
				{
					if (this._Reader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReaderIdChanging(value);
					this.SendPropertyChanging();
					this._ReaderId = value;
					this.SendPropertyChanged("ReaderId");
					this.OnReaderIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BookId", DbType = "UniqueIdentifier NOT NULL")]
		public System.Guid BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DepartmentId", DbType = "UniqueIdentifier NOT NULL")]
		public System.Guid DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeGetBook", DbType = "DateTime NOT NULL")]
		public System.DateTime TimeGetBook
		{
			get
			{
				return this._TimeGetBook;
			}
			set
			{
				if ((this._TimeGetBook != value))
				{
					this.OnTimeGetBookChanging(value);
					this.SendPropertyChanging();
					this._TimeGetBook = value;
					this.SendPropertyChanged("TimeGetBook");
					this.OnTimeGetBookChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LibrarianOpenOrderId", DbType = "UniqueIdentifier NOT NULL")]
		public System.Guid LibrarianOpenOrderId
		{
			get
			{
				return this._LibrarianOpenOrderId;
			}
			set
			{
				if ((this._LibrarianOpenOrderId != value))
				{
					if (this._LibrarianOpenOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLibrarianOpenOrderIdChanging(value);
					this.SendPropertyChanging();
					this._LibrarianOpenOrderId = value;
					this.SendPropertyChanged("LibrarianOpenOrderId");
					this.OnLibrarianOpenOrderIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeReturnBook", DbType = "DateTime NOT NULL")]
		public System.DateTime TimeReturnBook
		{
			get
			{
				return this._TimeReturnBook;
			}
			set
			{
				if ((this._TimeReturnBook != value))
				{
					this.OnTimeReturnBookChanging(value);
					this.SendPropertyChanging();
					this._TimeReturnBook = value;
					this.SendPropertyChanged("TimeReturnBook");
					this.OnTimeReturnBookChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LibrarianClosedOrderId", DbType = "UniqueIdentifier")]
		public System.Nullable<System.Guid> LibrarianClosedOrderId
		{
			get
			{
				return this._LibrarianClosedOrderId;
			}
			set
			{
				if ((this._LibrarianClosedOrderId != value))
				{
					if (this._LibrarianClosedOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLibrarianClosedOrderIdChanging(value);
					this.SendPropertyChanging();
					this._LibrarianClosedOrderId = value;
					this.SendPropertyChanged("LibrarianClosedOrderId");
					this.OnLibrarianClosedOrderIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Closed", DbType = "Bit NOT NULL")]
		public bool Closed
		{
			get
			{
				return this._Closed;
			}
			set
			{
				if ((this._Closed != value))
				{
					this.OnClosedChanging(value);
					this.SendPropertyChanging();
					this._Closed = value;
					this.SendPropertyChanged("Closed");
					this.OnClosedChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Book_Order", Storage = "_Book", ThisKey = "BookId", OtherKey = "Id", IsForeignKey = true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value)
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._BookId = value.Id;
					}
					else
					{
						this._BookId = default(System.Guid);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Librarian_Order", Storage = "_LibrarianOpenOrder", ThisKey = "LibrarianOpenOrderId", OtherKey = "Id", IsForeignKey = true)]
		public Librarian LibrarianOpenOrder
		{
			get
			{
				return this._LibrarianOpenOrder.Entity;
			}
			set
			{
				Librarian previousValue = this._LibrarianOpenOrder.Entity;
				if (((previousValue != value)
							|| (this._LibrarianOpenOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LibrarianOpenOrder.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._LibrarianOpenOrder.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._LibrarianOpenOrderId = value.Id;
					}
					else
					{
						this._LibrarianOpenOrderId = default(System.Guid);
					}
					this.SendPropertyChanged("LibrarianOpenOrder");
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Librarian_Order1", Storage = "_LibrarianClosedOrder", ThisKey = "LibrarianClosedOrderId", OtherKey = "Id", IsForeignKey = true)]
		public Librarian LibrarianClosedOrder
		{
			get
			{
				return this._LibrarianClosedOrder.Entity;
			}
			set
			{
				Librarian previousValue = this._LibrarianClosedOrder.Entity;
				if (((previousValue != value)
							|| (this._LibrarianClosedOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LibrarianClosedOrder.Entity = null;
						previousValue.Orders1.Remove(this);
					}
					this._LibrarianClosedOrder.Entity = value;
					if ((value != null))
					{
						value.Orders1.Add(this);
						this._LibrarianClosedOrderId = value.Id;
					}
					else
					{
						this._LibrarianClosedOrderId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("LibrarianClosedOrder");
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LibraryDepartment_Order", Storage = "_Department", ThisKey = "DepartmentId", OtherKey = "Id", IsForeignKey = true)]
		public LibraryDepartment Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				LibraryDepartment previousValue = this._Department.Entity;
				if (((previousValue != value)
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(System.Guid);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Reader_Order", Storage = "_Reader", ThisKey = "ReaderId", OtherKey = "Id", IsForeignKey = true)]
		public Reader Reader
		{
			get
			{
				return this._Reader.Entity;
			}
			set
			{
				Reader previousValue = this._Reader.Entity;
				if (((previousValue != value)
							|| (this._Reader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reader.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Reader.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ReaderId = value.Id;
					}
					else
					{
						this._ReaderId = default(System.Guid);
					}
					this.SendPropertyChanged("Reader");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
